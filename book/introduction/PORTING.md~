# Documentation for MP2

## Porting to other MCUs
Intention is that minimal things have to be done to port:
1) 	a) 3 phase (complimentary if required) PWM out required. `Timer1` typically used, `Timer8` can be used but main loop currently would need manually changing.
	b) set up CUBE with minimum 4x ADC readings (3x phase current and voltage compulsory, phase voltage sensors optional but strongly recommended and input for throttle if required)
	c) The ADC readings must be triggered at top center of the PWM, which can either be triggered through `CCR4` or the update event.
	d) The readings can either be made by the Injected or regular conversion manager. Recommended that the injected is used for `JDR1 = Iu`, `JDR2 = Iv`, `JDR3 = Iw`, `JDR4 = Vbus`.
	e) The ADC can be set up to include an out of range watchdog which can make a rapid overcurrent protection. This is hardware specific, set `AWD` interrupt and thresholds in CUBE, and populate the ADC interrupt handler with `handleError(ERROR_ADC_OUT_OF_RANGE_IA)`
	f) The mapping between the ADC readings and the FOC inputs are made in the `getRawADC()` function, which is implemented per project. Replicate appropriately, using example from F405 project.
2) populate the timer1 update interrupt with `MESC_PWM_IRQ_handler()` and `__HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE)`
3) populate timer 3 or 4 interrupt with `MESC_Slow_IRQ_handler(&htimx)` and `__HAL_TIM_CLEAR_IT(&htimx,TIM_IT_UPDATE)`
4) Run `MESCInit()` in the main
5) Start the slow loop timer and UART in main (`Timer1` started by `MESCInit()`)
6) Create your own hardware conf file which includes the methods and settings and defaults for your hardware. 
7) Either hard code your motor parameters in your hardware header file, or implement the autodetection every time, or implement a variant of the flash reader/writer (this is the hard bit for new MCUs)
8) Resolve the includes - your project must point to `../MESC_Common/Inc` in `Properties`->`C/C++ General`->`Paths and symbols`
9) Populate the fault handlers with `handleError(ERROR_HARDFAULT)` and other appropriate fault names

## Licence
This project will initially (and perhaps perpetually) contain a lot of firmware licenced under the STM Cube licence, BSD 3 clause https://opensource.org/licenses/BSD-3-Clause .   
The rest of the custom code is intended to be contained primarily in the MESC files, also BSD 3 Clause.
It is requested that if you borrow, port, refactor parts into your own code... etc this firmware, you may let the project owner know, But you are not compelled to. 
It would also be nice if concise and focused improvements were contributed back, but again, you are not compelled to.

You must retain credit for the code origin in your source, even on small segments borrowed or reimplemented. This is compelled.
If this code is borrowed in part or whole for use and published in GPLV2 V3... projects, you must grant a perpetual licence for your projects GPL code to be used permissively in this project reciprocally.
Otherwise, for commercial and permissively licenced projects, the code can be used as BSD-3-Clause. The intention of this project is to be useful to whoever wants to use, learn, build, sell... 
